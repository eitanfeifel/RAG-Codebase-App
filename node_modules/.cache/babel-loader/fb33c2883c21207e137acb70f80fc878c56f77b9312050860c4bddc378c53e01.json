{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import ChatWindow from\"../components/ChatWindow\";import\"bootstrap/dist/css/bootstrap.min.css\";import SideBar from\"../components/SideBar\";import\"./ChatPage.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function ChatPage(){const[repos,setRepos]=useState([]);// Cloned repos for sidebar\nconst[loadingRepos,setLoadingRepos]=useState([]);// Current repo being loaded\nconst[currentRepo,setCurrentRepo]=useState(null);// Active chat repo\nconst[availableRepos,setAvailableRepos]=useState([]);// Repos available to clone\nconst[isCloneMenuVisible,setCloneMenuVisible]=useState(false);// Toggle clone menu visibility\nconst[chatHistories,setChatHistories]=useState({});// Maintain separate chat histories per repo\n// Fetch available repos when Clone Repo button is clicked\nuseEffect(()=>{if(isCloneMenuVisible){fetch(\"/repos\").then(response=>response.json()).then(data=>setAvailableRepos(data)).catch(error=>console.error(\"Error fetching repos:\",error));}},[isCloneMenuVisible]);const handleRepoSelect=repo=>{setCurrentRepo(repo);// Set the repo as active for chat\nif(!chatHistories[repo]){setChatHistories(prev=>({...prev,[repo]:[]// Initialize chat history if it doesn't exist\n}));}};const handleCloneRepo=async repoUrl=>{const clonedRepo=repoUrl.split(\"/\").pop().replace(\".git\",\"\");// Extract repo name\n// If the repository is already cloned or currently being loaded, return early\nif(repos.includes(clonedRepo)||loadingRepos.includes(clonedRepo))return;// Add the repository to the list of currently loading repos\nsetLoadingRepos(prevLoadingRepos=>[...prevLoadingRepos,clonedRepo]);try{const response=await fetch(\"/embed\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({repo_url:repoUrl})});if(response.ok){// Successfully cloned repo, add it to repos list\nsetRepos(prevRepos=>[...prevRepos,clonedRepo]);}else{console.error(\"Failed to clone repository\");}}catch(error){console.error(\"Error cloning repository:\",error);}finally{// Remove the repository from the list of currently loading repos\nsetLoadingRepos(prevLoadingRepos=>prevLoadingRepos.filter(repo=>repo!==clonedRepo));setCloneMenuVisible(false);// Hide clone menu\n}};return/*#__PURE__*/_jsxs(\"div\",{className:\"container-fluid\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"col-md-3\",children:/*#__PURE__*/_jsx(SideBar,{repos:repos,loadingRepos:loadingRepos,onRepoSelect:handleRepoSelect})}),/*#__PURE__*/_jsx(\"div\",{className:\"col-md-9\",children:/*#__PURE__*/_jsx(\"div\",{className:\"chat-window\",children:currentRepo?/*#__PURE__*/_jsx(ChatWindow,{activeRepo:currentRepo,chatHistory:chatHistories[currentRepo],updateChatHistory:newMessage=>setChatHistories(prev=>({...prev,[currentRepo]:[...prev[currentRepo],newMessage]}))}):/*#__PURE__*/_jsx(\"p\",{className:\"text-center mt-5\",children:\"Select a repository to start chatting\"})})})]}),isCloneMenuVisible&&/*#__PURE__*/_jsxs(\"div\",{className:\"clone-menu card mt-3 p-3\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Available Repositories\"}),/*#__PURE__*/_jsx(\"ul\",{className:\"list-group list-group-flush\",children:availableRepos.map((repoUrl,index)=>/*#__PURE__*/_jsxs(\"li\",{className:\"list-group-item d-flex justify-content-between align-items-center\",children:[repoUrl.split(\"/\").pop().replace(\".git\",\"\"),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-primary\",onClick:()=>handleCloneRepo(repoUrl),children:\"Clone\"})]},index))}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-secondary mt-3\",onClick:()=>setCloneMenuVisible(false),children:\"Close\"})]}),!isCloneMenuVisible&&/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-primary mt-3\",onClick:()=>setCloneMenuVisible(true),children:\"Clone Repo\"})]});}export default ChatPage;","map":{"version":3,"names":["React","useState","useEffect","ChatWindow","SideBar","jsx","_jsx","jsxs","_jsxs","ChatPage","repos","setRepos","loadingRepos","setLoadingRepos","currentRepo","setCurrentRepo","availableRepos","setAvailableRepos","isCloneMenuVisible","setCloneMenuVisible","chatHistories","setChatHistories","fetch","then","response","json","data","catch","error","console","handleRepoSelect","repo","prev","handleCloneRepo","repoUrl","clonedRepo","split","pop","replace","includes","prevLoadingRepos","method","headers","body","JSON","stringify","repo_url","ok","prevRepos","filter","className","children","onRepoSelect","activeRepo","chatHistory","updateChatHistory","newMessage","map","index","onClick"],"sources":["C:/Users/eitan/OneDrive/Documents/HEADSTARTER/PROJ/4/codebase_rag/app/src/pages/ChatPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport ChatWindow from \"../components/ChatWindow\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"; \r\nimport SideBar from \"../components/SideBar\";\r\nimport \"./ChatPage.css\";\r\n\r\nfunction ChatPage() {\r\n    const [ repos, setRepos ] = useState( [] ); // Cloned repos for sidebar\r\n    const [ loadingRepos, setLoadingRepos ] = useState( [] ); // Current repo being loaded\r\n    const [ currentRepo, setCurrentRepo ] = useState( null ); // Active chat repo\r\n    const [ availableRepos, setAvailableRepos ] = useState( [] ); // Repos available to clone\r\n    const [ isCloneMenuVisible, setCloneMenuVisible ] = useState( false ); // Toggle clone menu visibility\r\n    const [ chatHistories, setChatHistories ] = useState( {} ); // Maintain separate chat histories per repo\r\n\r\n    // Fetch available repos when Clone Repo button is clicked\r\n    useEffect( () => {\r\n        if ( isCloneMenuVisible ) {\r\n            fetch( \"/repos\" )\r\n                .then( ( response ) => response.json() )\r\n                .then( ( data) => setAvailableRepos( data ) )\r\n                .catch( ( error ) => console.error( \"Error fetching repos:\", error ) );\r\n        }\r\n    }, [ isCloneMenuVisible ] );\r\n\r\n    const handleRepoSelect = ( repo ) => {\r\n        setCurrentRepo( repo ); // Set the repo as active for chat\r\n        if ( !chatHistories[ repo ] ) {\r\n            setChatHistories( ( prev ) => ( {\r\n                ...prev,\r\n                [ repo ]: [], // Initialize chat history if it doesn't exist\r\n            } ) );\r\n        }\r\n    };\r\n\r\n    const handleCloneRepo = async ( repoUrl ) => {\r\n        const clonedRepo = repoUrl.split( \"/\" ).pop().replace( \".git\", \"\" ); // Extract repo name\r\n    \r\n        // If the repository is already cloned or currently being loaded, return early\r\n        if ( repos.includes( clonedRepo ) || loadingRepos.includes( clonedRepo ) ) return;\r\n    \r\n        // Add the repository to the list of currently loading repos\r\n        setLoadingRepos( ( prevLoadingRepos ) => [ ...prevLoadingRepos, clonedRepo ] );\r\n    \r\n        try {\r\n            const response = await fetch( \"/embed\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify( { repo_url: repoUrl } ),\r\n            } );\r\n    \r\n            if ( response.ok ) {\r\n                // Successfully cloned repo, add it to repos list\r\n                setRepos( ( prevRepos ) => [ ...prevRepos, clonedRepo ] );\r\n            } else {\r\n                console.error( \"Failed to clone repository\" );\r\n            }\r\n        } catch ( error ) {\r\n            console.error( \"Error cloning repository:\", error );\r\n        } finally {\r\n            // Remove the repository from the list of currently loading repos\r\n            setLoadingRepos( ( prevLoadingRepos ) => prevLoadingRepos.filter( ( repo ) => repo !== clonedRepo ) );\r\n            setCloneMenuVisible( false ); // Hide clone menu\r\n        }\r\n    };\r\n    \r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n            <div className=\"col-md-3\">\r\n                <SideBar repos={repos} loadingRepos={loadingRepos} onRepoSelect={handleRepoSelect} />\r\n            </div>\r\n            <div className=\"col-md-9\">\r\n                <div className=\"chat-window\">\r\n                    {currentRepo ? (\r\n                        <ChatWindow\r\n                            activeRepo={currentRepo}\r\n                            chatHistory={chatHistories[currentRepo]}\r\n                            updateChatHistory={(newMessage) =>\r\n                                setChatHistories((prev) => ({\r\n                                    ...prev,\r\n                                    [currentRepo]: [...prev[currentRepo], newMessage],\r\n                                }))\r\n                            }\r\n                        />\r\n                    ) : (\r\n                        <p className=\"text-center mt-5\">Select a repository to start chatting</p>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        {isCloneMenuVisible && (\r\n            <div className=\"clone-menu card mt-3 p-3\">\r\n                <h4>Available Repositories</h4>\r\n                <ul className=\"list-group list-group-flush\">\r\n                    {availableRepos.map((repoUrl, index) => (\r\n                        <li key={index} className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                            {repoUrl.split(\"/\").pop().replace(\".git\", \"\")}\r\n                            <button className=\"btn btn-primary\" onClick={() => handleCloneRepo(repoUrl)}>\r\n                                Clone\r\n                            </button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n                <button className=\"btn btn-secondary mt-3\" onClick={() => setCloneMenuVisible(false)}>\r\n                    Close\r\n                </button>\r\n            </div>\r\n        )}\r\n        {!isCloneMenuVisible && (\r\n            <button\r\n                className=\"btn btn-primary mt-3\"\r\n                onClick={() => setCloneMenuVisible(true)}\r\n            >\r\n                Clone Repo\r\n            </button>\r\n        )}\r\n    </div>\r\n);\r\n}\r\n\r\nexport default ChatPage;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,CAAAC,UAAU,KAAM,0BAA0B,CACjD,MAAO,sCAAsC,CAC7C,MAAO,CAAAC,OAAO,KAAM,uBAAuB,CAC3C,MAAO,gBAAgB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAExB,QAAS,CAAAC,QAAQA,CAAA,CAAG,CAChB,KAAM,CAAEC,KAAK,CAAEC,QAAQ,CAAE,CAAGV,QAAQ,CAAE,EAAG,CAAC,CAAE;AAC5C,KAAM,CAAEW,YAAY,CAAEC,eAAe,CAAE,CAAGZ,QAAQ,CAAE,EAAG,CAAC,CAAE;AAC1D,KAAM,CAAEa,WAAW,CAAEC,cAAc,CAAE,CAAGd,QAAQ,CAAE,IAAK,CAAC,CAAE;AAC1D,KAAM,CAAEe,cAAc,CAAEC,iBAAiB,CAAE,CAAGhB,QAAQ,CAAE,EAAG,CAAC,CAAE;AAC9D,KAAM,CAAEiB,kBAAkB,CAAEC,mBAAmB,CAAE,CAAGlB,QAAQ,CAAE,KAAM,CAAC,CAAE;AACvE,KAAM,CAAEmB,aAAa,CAAEC,gBAAgB,CAAE,CAAGpB,QAAQ,CAAE,CAAC,CAAE,CAAC,CAAE;AAE5D;AACAC,SAAS,CAAE,IAAM,CACb,GAAKgB,kBAAkB,CAAG,CACtBI,KAAK,CAAE,QAAS,CAAC,CACZC,IAAI,CAAIC,QAAQ,EAAMA,QAAQ,CAACC,IAAI,CAAC,CAAE,CAAC,CACvCF,IAAI,CAAIG,IAAI,EAAKT,iBAAiB,CAAES,IAAK,CAAE,CAAC,CAC5CC,KAAK,CAAIC,KAAK,EAAMC,OAAO,CAACD,KAAK,CAAE,uBAAuB,CAAEA,KAAM,CAAE,CAAC,CAC9E,CACJ,CAAC,CAAE,CAAEV,kBAAkB,CAAG,CAAC,CAE3B,KAAM,CAAAY,gBAAgB,CAAKC,IAAI,EAAM,CACjChB,cAAc,CAAEgB,IAAK,CAAC,CAAE;AACxB,GAAK,CAACX,aAAa,CAAEW,IAAI,CAAE,CAAG,CAC1BV,gBAAgB,CAAIW,IAAI,GAAQ,CAC5B,GAAGA,IAAI,CACP,CAAED,IAAI,EAAI,EAAI;AAClB,CAAC,CAAG,CAAC,CACT,CACJ,CAAC,CAED,KAAM,CAAAE,eAAe,CAAG,KAAQ,CAAAC,OAAO,EAAM,CACzC,KAAM,CAAAC,UAAU,CAAGD,OAAO,CAACE,KAAK,CAAE,GAAI,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,OAAO,CAAE,MAAM,CAAE,EAAG,CAAC,CAAE;AAErE;AACA,GAAK5B,KAAK,CAAC6B,QAAQ,CAAEJ,UAAW,CAAC,EAAIvB,YAAY,CAAC2B,QAAQ,CAAEJ,UAAW,CAAC,CAAG,OAE3E;AACAtB,eAAe,CAAI2B,gBAAgB,EAAM,CAAE,GAAGA,gBAAgB,CAAEL,UAAU,CAAG,CAAC,CAE9E,GAAI,CACA,KAAM,CAAAX,QAAQ,CAAG,KAAM,CAAAF,KAAK,CAAE,QAAQ,CAAE,CACpCmB,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACL,cAAc,CAAE,kBACpB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAE,CAAEC,QAAQ,CAAEZ,OAAQ,CAAE,CAChD,CAAE,CAAC,CAEH,GAAKV,QAAQ,CAACuB,EAAE,CAAG,CACf;AACApC,QAAQ,CAAIqC,SAAS,EAAM,CAAE,GAAGA,SAAS,CAAEb,UAAU,CAAG,CAAC,CAC7D,CAAC,IAAM,CACHN,OAAO,CAACD,KAAK,CAAE,4BAA6B,CAAC,CACjD,CACJ,CAAE,MAAQA,KAAK,CAAG,CACdC,OAAO,CAACD,KAAK,CAAE,2BAA2B,CAAEA,KAAM,CAAC,CACvD,CAAC,OAAS,CACN;AACAf,eAAe,CAAI2B,gBAAgB,EAAMA,gBAAgB,CAACS,MAAM,CAAIlB,IAAI,EAAMA,IAAI,GAAKI,UAAW,CAAE,CAAC,CACrGhB,mBAAmB,CAAE,KAAM,CAAC,CAAE;AAClC,CACJ,CAAC,CAGD,mBACIX,KAAA,QAAK0C,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAChC3C,KAAA,QAAK0C,SAAS,CAAC,KAAK,CAAAC,QAAA,eAChB7C,IAAA,QAAK4C,SAAS,CAAC,UAAU,CAAAC,QAAA,cACrB7C,IAAA,CAACF,OAAO,EAACM,KAAK,CAAEA,KAAM,CAACE,YAAY,CAAEA,YAAa,CAACwC,YAAY,CAAEtB,gBAAiB,CAAE,CAAC,CACpF,CAAC,cACNxB,IAAA,QAAK4C,SAAS,CAAC,UAAU,CAAAC,QAAA,cACrB7C,IAAA,QAAK4C,SAAS,CAAC,aAAa,CAAAC,QAAA,CACvBrC,WAAW,cACRR,IAAA,CAACH,UAAU,EACPkD,UAAU,CAAEvC,WAAY,CACxBwC,WAAW,CAAElC,aAAa,CAACN,WAAW,CAAE,CACxCyC,iBAAiB,CAAGC,UAAU,EAC1BnC,gBAAgB,CAAEW,IAAI,GAAM,CACxB,GAAGA,IAAI,CACP,CAAClB,WAAW,EAAG,CAAC,GAAGkB,IAAI,CAAClB,WAAW,CAAC,CAAE0C,UAAU,CACpD,CAAC,CAAC,CACL,CACJ,CAAC,cAEFlD,IAAA,MAAG4C,SAAS,CAAC,kBAAkB,CAAAC,QAAA,CAAC,uCAAqC,CAAG,CAC3E,CACA,CAAC,CACL,CAAC,EACL,CAAC,CACLjC,kBAAkB,eACfV,KAAA,QAAK0C,SAAS,CAAC,0BAA0B,CAAAC,QAAA,eACrC7C,IAAA,OAAA6C,QAAA,CAAI,wBAAsB,CAAI,CAAC,cAC/B7C,IAAA,OAAI4C,SAAS,CAAC,6BAA6B,CAAAC,QAAA,CACtCnC,cAAc,CAACyC,GAAG,CAAC,CAACvB,OAAO,CAAEwB,KAAK,gBAC/BlD,KAAA,OAAgB0C,SAAS,CAAC,mEAAmE,CAAAC,QAAA,EACxFjB,OAAO,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,OAAO,CAAC,MAAM,CAAE,EAAE,CAAC,cAC7ChC,IAAA,WAAQ4C,SAAS,CAAC,iBAAiB,CAACS,OAAO,CAAEA,CAAA,GAAM1B,eAAe,CAACC,OAAO,CAAE,CAAAiB,QAAA,CAAC,OAE7E,CAAQ,CAAC,GAJJO,KAKL,CACP,CAAC,CACF,CAAC,cACLpD,IAAA,WAAQ4C,SAAS,CAAC,wBAAwB,CAACS,OAAO,CAAEA,CAAA,GAAMxC,mBAAmB,CAAC,KAAK,CAAE,CAAAgC,QAAA,CAAC,OAEtF,CAAQ,CAAC,EACR,CACR,CACA,CAACjC,kBAAkB,eAChBZ,IAAA,WACI4C,SAAS,CAAC,sBAAsB,CAChCS,OAAO,CAAEA,CAAA,GAAMxC,mBAAmB,CAAC,IAAI,CAAE,CAAAgC,QAAA,CAC5C,YAED,CAAQ,CACX,EACA,CAAC,CAEV,CAEA,cAAe,CAAA1C,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}