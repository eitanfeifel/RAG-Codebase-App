{"ast":null,"code":"import React,{useState}from\"react\";import{BrowserRouter as Router,Routes,Route,useNavigate}from\"react-router-dom\";import HomePage from\"./HomePage\";import ChatPage from\"./ChatPage\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[repos,setRepos]=useState([]);const[isLoading,setIsLoading]=useState(false);const navigate=useNavigate();const handleCloneRepos=async()=>{setIsLoading(true);try{const response=await fetch(\"/clone-repos\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"// Set the Content-Type header\n},body:JSON.stringify({repos:[\"repo1.git\",\"repo2.git\"]})// Replace with actual selected repos\n});if(response.ok){const reposData=await response.json();setRepos(reposData.repos);setIsLoading(false);// Stop loading\nnavigate(\"/chat\");// Redirect to chat page\n}else{console.error(\"Failed to clone repositories.\");setIsLoading(false);}}catch(error){console.error(\"Error cloning repositories:\",error);setIsLoading(false);}};return/*#__PURE__*/_jsx(Router,{children:/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(HomePage,{isLoading:isLoading,handleCloneRepos:handleCloneRepos})}),/*#__PURE__*/_jsx(Route,{path:\"/chat\",element:/*#__PURE__*/_jsx(ChatPage,{repos:repos})})]})});}export default App;","map":{"version":3,"names":["React","useState","BrowserRouter","Router","Routes","Route","useNavigate","HomePage","ChatPage","jsx","_jsx","jsxs","_jsxs","App","repos","setRepos","isLoading","setIsLoading","navigate","handleCloneRepos","response","fetch","method","headers","body","JSON","stringify","ok","reposData","json","console","error","children","path","element"],"sources":["C:/Users/eitan/OneDrive/Documents/HEADSTARTER/PROJ/4/codebase_rag/app/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Routes, Route, useNavigate } from \"react-router-dom\";\nimport HomePage from \"./HomePage\";\nimport ChatPage from \"./ChatPage\";\n\nfunction App() {\n    const [repos, setRepos] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const navigate = useNavigate();\n\n    const handleCloneRepos = async () => {\n        setIsLoading(true);\n        try {\n            const response = await fetch(\"/clone-repos\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\", // Set the Content-Type header\n                },\n                body: JSON.stringify({ repos: [\"repo1.git\", \"repo2.git\"] }), // Replace with actual selected repos\n            });\n\n            if (response.ok) {\n                const reposData = await response.json();\n                setRepos(reposData.repos);\n                setIsLoading(false); // Stop loading\n                navigate(\"/chat\"); // Redirect to chat page\n            } else {\n                console.error(\"Failed to clone repositories.\");\n                setIsLoading(false);\n            }\n        } catch (error) {\n            console.error(\"Error cloning repositories:\", error);\n            setIsLoading(false);\n        }\n    };\n\n    return (\n        <Router>\n            <Routes>\n                <Route\n                    path=\"/\"\n                    element={<HomePage isLoading={isLoading} handleCloneRepos={handleCloneRepos} />}\n                />\n                <Route path=\"/chat\" element={<ChatPage repos={repos} />} />\n            </Routes>\n        </Router>\n    );\n}\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,aAAa,GAAI,CAAAC,MAAM,CAAEC,MAAM,CAAEC,KAAK,CAAEC,WAAW,KAAQ,kBAAkB,CACtF,MAAO,CAAAC,QAAQ,KAAM,YAAY,CACjC,MAAO,CAAAC,QAAQ,KAAM,YAAY,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAElC,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACX,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGd,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAACe,SAAS,CAAEC,YAAY,CAAC,CAAGhB,QAAQ,CAAC,KAAK,CAAC,CACjD,KAAM,CAAAiB,QAAQ,CAAGZ,WAAW,CAAC,CAAC,CAE9B,KAAM,CAAAa,gBAAgB,CAAG,KAAAA,CAAA,GAAY,CACjCF,YAAY,CAAC,IAAI,CAAC,CAClB,GAAI,CACA,KAAM,CAAAG,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,cAAc,CAAE,CACzCC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACL,cAAc,CAAE,kBAAoB;AACxC,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEZ,KAAK,CAAE,CAAC,WAAW,CAAE,WAAW,CAAE,CAAC,CAAG;AACjE,CAAC,CAAC,CAEF,GAAIM,QAAQ,CAACO,EAAE,CAAE,CACb,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CACvCd,QAAQ,CAACa,SAAS,CAACd,KAAK,CAAC,CACzBG,YAAY,CAAC,KAAK,CAAC,CAAE;AACrBC,QAAQ,CAAC,OAAO,CAAC,CAAE;AACvB,CAAC,IAAM,CACHY,OAAO,CAACC,KAAK,CAAC,+BAA+B,CAAC,CAC9Cd,YAAY,CAAC,KAAK,CAAC,CACvB,CACJ,CAAE,MAAOc,KAAK,CAAE,CACZD,OAAO,CAACC,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACnDd,YAAY,CAAC,KAAK,CAAC,CACvB,CACJ,CAAC,CAED,mBACIP,IAAA,CAACP,MAAM,EAAA6B,QAAA,cACHpB,KAAA,CAACR,MAAM,EAAA4B,QAAA,eACHtB,IAAA,CAACL,KAAK,EACF4B,IAAI,CAAC,GAAG,CACRC,OAAO,cAAExB,IAAA,CAACH,QAAQ,EAACS,SAAS,CAAEA,SAAU,CAACG,gBAAgB,CAAEA,gBAAiB,CAAE,CAAE,CACnF,CAAC,cACFT,IAAA,CAACL,KAAK,EAAC4B,IAAI,CAAC,OAAO,CAACC,OAAO,cAAExB,IAAA,CAACF,QAAQ,EAACM,KAAK,CAAEA,KAAM,CAAE,CAAE,CAAE,CAAC,EACvD,CAAC,CACL,CAAC,CAEjB,CAEA,cAAe,CAAAD,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}