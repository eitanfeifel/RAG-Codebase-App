{"ast":null,"code":"import React,{useState}from\"react\";import\"./ChatWindow.css\";import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";function ChatWindow(_ref){let{activeRepo,chatHistory,updateChatHistory}=_ref;const[input,setInput]=useState(\"\");const handleSend=async()=>{if(!input.trim())return;// Update chat history with user's message\nupdateChatHistory({user:\"You\",text:input});// Send query to backend\ntry{const response=await fetch(\"/chat\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({query:input,repo:activeRepo})});if(response.ok){const data=await response.json();updateChatHistory({user:\"Bot\",text:data.answer});}else{console.error(\"Failed to get a response from the server\");}}catch(error){console.error(\"Error during chat:\",error);}setInput(\"\");// Clear input field\n};return/*#__PURE__*/_jsxs(\"div\",{className:\"chat-window\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"messages\",children:chatHistory.map((msg,index)=>/*#__PURE__*/_jsxs(\"div\",{className:`message ${msg.user===\"You\"?\"user\":\"bot\"}`,children:[/*#__PURE__*/_jsxs(\"strong\",{children:[msg.user,\": \"]}),\" \",msg.text]},index))}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-container\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:input,onChange:e=>setInput(e.target.value),placeholder:`Ask a question about ${activeRepo}`}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSend,children:\"Send\"})]})]});}export default ChatWindow;","map":{"version":3,"names":["React","useState","jsxs","_jsxs","jsx","_jsx","ChatWindow","_ref","activeRepo","chatHistory","updateChatHistory","input","setInput","handleSend","trim","user","text","response","fetch","method","headers","body","JSON","stringify","query","repo","ok","data","json","answer","console","error","className","children","map","msg","index","type","value","onChange","e","target","placeholder","onClick"],"sources":["C:/Users/eitan/OneDrive/Documents/HEADSTARTER/PROJ/4/codebase_rag/app/src/components/ChatWindow.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./ChatWindow.css\";\r\n\r\nfunction ChatWindow({ activeRepo, chatHistory, updateChatHistory }) {\r\n    const [input, setInput] = useState(\"\");\r\n\r\n    const handleSend = async () => {\r\n        if (!input.trim()) return;\r\n\r\n        // Update chat history with user's message\r\n        updateChatHistory({ user: \"You\", text: input });\r\n\r\n        // Send query to backend\r\n        try {\r\n            const response = await fetch(\"/chat\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({\r\n                    query: input,\r\n                    repo: activeRepo,\r\n                }),\r\n            });\r\n\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                updateChatHistory({ user: \"Bot\", text: data.answer });\r\n            } else {\r\n                console.error(\"Failed to get a response from the server\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error during chat:\", error);\r\n        }\r\n\r\n        setInput(\"\"); // Clear input field\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-window\">\r\n            <div className=\"messages\">\r\n                {chatHistory.map((msg, index) => (\r\n                    <div key={index} className={`message ${msg.user === \"You\" ? \"user\" : \"bot\"}`}>\r\n                        <strong>{msg.user}: </strong> {msg.text}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder={`Ask a question about ${activeRepo}`}\r\n                />\r\n                <button onClick={handleSend}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatWindow;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,kBAAkB,CAAC,OAAAC,IAAA,IAAAC,KAAA,CAAAC,GAAA,IAAAC,IAAA,yBAE1B,QAAS,CAAAC,UAAUA,CAAAC,IAAA,CAAiD,IAAhD,CAAEC,UAAU,CAAEC,WAAW,CAAEC,iBAAkB,CAAC,CAAAH,IAAA,CAC9D,KAAM,CAACI,KAAK,CAAEC,QAAQ,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CAEtC,KAAM,CAAAY,UAAU,CAAG,KAAAA,CAAA,GAAY,CAC3B,GAAI,CAACF,KAAK,CAACG,IAAI,CAAC,CAAC,CAAE,OAEnB;AACAJ,iBAAiB,CAAC,CAAEK,IAAI,CAAE,KAAK,CAAEC,IAAI,CAAEL,KAAM,CAAC,CAAC,CAE/C;AACA,GAAI,CACA,KAAM,CAAAM,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,OAAO,CAAE,CAClCC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACL,cAAc,CAAE,kBACpB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACjBC,KAAK,CAAEb,KAAK,CACZc,IAAI,CAAEjB,UACV,CAAC,CACL,CAAC,CAAC,CAEF,GAAIS,QAAQ,CAACS,EAAE,CAAE,CACb,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAV,QAAQ,CAACW,IAAI,CAAC,CAAC,CAClClB,iBAAiB,CAAC,CAAEK,IAAI,CAAE,KAAK,CAAEC,IAAI,CAAEW,IAAI,CAACE,MAAO,CAAC,CAAC,CACzD,CAAC,IAAM,CACHC,OAAO,CAACC,KAAK,CAAC,0CAA0C,CAAC,CAC7D,CACJ,CAAE,MAAOA,KAAK,CAAE,CACZD,OAAO,CAACC,KAAK,CAAC,oBAAoB,CAAEA,KAAK,CAAC,CAC9C,CAEAnB,QAAQ,CAAC,EAAE,CAAC,CAAE;AAClB,CAAC,CAED,mBACIT,KAAA,QAAK6B,SAAS,CAAC,aAAa,CAAAC,QAAA,eACxB5B,IAAA,QAAK2B,SAAS,CAAC,UAAU,CAAAC,QAAA,CACpBxB,WAAW,CAACyB,GAAG,CAAC,CAACC,GAAG,CAAEC,KAAK,gBACxBjC,KAAA,QAAiB6B,SAAS,CAAE,WAAWG,GAAG,CAACpB,IAAI,GAAK,KAAK,CAAG,MAAM,CAAG,KAAK,EAAG,CAAAkB,QAAA,eACzE9B,KAAA,WAAA8B,QAAA,EAASE,GAAG,CAACpB,IAAI,CAAC,IAAE,EAAQ,CAAC,IAAC,CAACoB,GAAG,CAACnB,IAAI,GADjCoB,KAEL,CACR,CAAC,CACD,CAAC,cACNjC,KAAA,QAAK6B,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAC5B5B,IAAA,UACIgC,IAAI,CAAC,MAAM,CACXC,KAAK,CAAE3B,KAAM,CACb4B,QAAQ,CAAGC,CAAC,EAAK5B,QAAQ,CAAC4B,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAC1CI,WAAW,CAAE,wBAAwBlC,UAAU,EAAG,CACrD,CAAC,cACFH,IAAA,WAAQsC,OAAO,CAAE9B,UAAW,CAAAoB,QAAA,CAAC,MAAI,CAAQ,CAAC,EACzC,CAAC,EACL,CAAC,CAEd,CAEA,cAAe,CAAA3B,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}